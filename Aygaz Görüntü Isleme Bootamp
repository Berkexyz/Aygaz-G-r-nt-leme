{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2333429,"sourceType":"datasetVersion","datasetId":1408532}],"dockerImageVersionId":30805,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 🐾 Proje: Aygaz Görüntü İşleme Kampı 🔍","metadata":{}},{"cell_type":"markdown","source":"📌 **Projenin Amacı ve Kapsamı**:\n\nBu proje, **görüntü işleme ve derin öğrenme** tekniklerini kullanarak çeşitli hayvanları sınıflandırmaya yönelik bir model geliştirmeyi amaçlamaktadır. Aygaz Görüntü İşleme Kampı'nda öğrendiğimiz yöntemleri uygulayarak, farklı hayvan türlerini doğru şekilde sınıflandırabilen bir yapay zeka modelinin eğitilmesi hedeflenmiştir. 🐯🐶🐱\n\nProje kapsamında:\n\n* **Hayvan türleri**: Leopar, Dolphin, Aslan, Tilki, Moose, Tavşan, At, Sincap, Yarasa, ve Goril gibi 10 farklı hayvan türü sınıflandırılmaktadır. 🦁🦊🦏\n\n* **Veri Seti**: Bu proje, hayvan görselleri içeren geniş bir veri setini kullanarak, her bir görseli etiketleyerek modelin doğruluğunu artırmayı hedeflemiştir.\n\n* **Görüntü İşleme Teknikleri**: Görüntülerin parlaklık artırma, renk sabitliği uygulama gibi manipülasyonlarla modellenin dayanıklılığı test edilmiştir. 🔧💡","metadata":{}},{"cell_type":"markdown","source":"## **🛠️ Gerekli Kütüphaneler ve İşlevleri:**\n* **os, shutil**: Dosya ve klasör yönetimi işlemleri için.\n* **cv2 (OpenCV)**: Görüntü işleme ve boyutlandırma için.\n* **numpy**: Sayısal hesaplamalar ve veri manipülasyonu için.\n* **ImageDataGenerator**: Görüntü veri artırma (augmentation) için.\n* **train_test_split**: Eğitim ve test veri setlerini ayırmak için.\n* **Model, Dense, Flatten, Dropout, BatchNormalization**: Model katmanlarını oluşturmak için Keras araçları.\n* **matplotlib**: Sonuçları görselleştirmek için.\n* **keras**: Derin öğrenme modelleme ve işlevsellik için.\n* **models, layers**: Keras ile model ve katmanlar oluşturmak için.","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport shutil\nimport random\nfrom glob import glob\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow import keras\nfrom tensorflow.keras import models, layers\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:21:04.402611Z","iopub.execute_input":"2024-12-18T19:21:04.403563Z","iopub.status.idle":"2024-12-18T19:21:04.409301Z","shell.execute_reply.started":"2024-12-18T19:21:04.403528Z","shell.execute_reply":"2024-12-18T19:21:04.408170Z"}},"outputs":[],"execution_count":78},{"cell_type":"markdown","source":"## 📊**Veri Setinin Hazılanması**\n10 Hayvan türünü veri setimizden seçip klasöre taşıyoruz.\n1. **Değişkenler ve Parametreler**:\n\n    * **image_size**: Görüntülerin boyutları (128, 128) olarak ayarlanır. 🖼️\n    * **classes**: Sınıf isimleri (hayvan türleri) belirlenir. 🐆🦅\n    * **images_per_class**: Her sınıf için kullanılacak görüntü sayısı (650). 🖼️\n    * **source_dir**: Veri setinin bulunduğu kaynak dizin. 📂\n    * **train_dir ve val_dir**: Eğitim ve doğrulama verilerinin depolanacağı dizinler. 📁\n\n\n2. **Veri Hazırlama Fonksiyonu (prepare_dataset)**:\n\n    * **validation_split**: Eğitim ve doğrulama verilerini ayıran oran (varsayılan %20). 📊\n\n\n3. **Dizin Oluşturma**:\n\n    * **train_dir** ve **val_dir** içinde her sınıf için uygun alt dizinler oluşturulur. 📂\n\n\n4. **Resimlerin Seçilmesi ve Karıştırılması**:\n\n    * Her sınıftan **650** kadar görüntü seçilir. 🖼️\n    * Görüntüler rastgele karıştırılır (veri çeşitliliği sağlamak için). 🔀\n\n\n5. **Eğitim ve Doğrulama Verisi Ayırma**:\n\n    * Görüntüler, validation_split oranına göre eğitim ve doğrulama verilerine ayrılır. 📊\n\n\n6. **Görüntüleri Eğitim ve Doğrulama Dizine Kopyalama**:\n\n    * Seçilen eğitim ve doğrulama verileri uygun dizinlere kopyalanır. 📤📥\n\n\n7. **Başarıyla Veri Seti Hazırlama**:\n\n    * Veri seti başarıyla hazırlandığında kullanıcıya bilgi verilir. ✅\n","metadata":{}},{"cell_type":"code","source":"classes = [\"leopard\", \"dolphin\", \"lion\", \"fox\", \"moose\", \"rabbit\", \"horse\", \"squirrel\", \"antelope\", \"gorilla\", \"cow\"]\nimages_per_class = 650\nsource_dir = \"/kaggle/input/animals-with-attributes-2/Animals_with_Attributes2/JPEGImages\"\ndest_dir = \"/kaggle/FImages/FilteredImages/train\"\n\n\nos.makedirs(dest_dir, exist_ok=True)\n    \nfor class_name in classes:\n    source_path = os.path.join(source_dir, class_name)\n    dest_class_path = os.path.join(dest_dir, class_name)\n\n    os.makedirs(dest_class_path, exist_ok=True)\n        \n    images = glob(os.path.join(source_path, '*.jpg'))[:images_per_class]\n    for img in images:\n        shutil.copy(img, dest_class_path)\n           ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:21:04.424913Z","iopub.execute_input":"2024-12-18T19:21:04.425172Z","iopub.status.idle":"2024-12-18T19:21:40.870570Z","shell.execute_reply.started":"2024-12-18T19:21:04.425147Z","shell.execute_reply":"2024-12-18T19:21:40.869493Z"}},"outputs":[],"execution_count":79},{"cell_type":"markdown","source":"## 🔄**GÖRSELLERİN YÜKLENMESİ 🧩**\nBu adımda, görselleri yükleyip uygun şekilde etiketliyoruz, böylece modelin eğitiminde kullanılacak hale getiriyoruz. 🚀\n\n📌 İşlemler:\n1. **Görsel Yükleme**: cv2.imread() ile her bir sınıfın görselleri okunur. 📂\n2. **Normalizasyon**: Görseller, modelin daha verimli öğrenmesi için 0-1 aralığına normalleştirilir (img = img / 255.0). ⚖️\n3. **Etiketleme**: Her görsel, ait olduğu sınıfın adı ile etiketlenir. 🏷️\n\n📍 Sonuçlar:\n* **X**: Ön işlenmiş tüm görseller.\n* **y**: Her görselin doğru sınıf etiketi.","metadata":{}},{"cell_type":"code","source":"def load_images(data_dir, allowed_classes):\n    images = []\n    labels = []\n    for class_name in os.listdir(data_dir):\n        if class_name not in allowed_classes:\n            continue  \n        class_path = os.path.join(data_dir, class_name)\n        for file_name in os.listdir(class_path):\n            img_path = os.path.join(class_path, file_name)\n            img = cv2.imread(img_path)\n            if img is not None:\n                img = cv2.resize(img, (128, 128)) / 255.0\n                images.append(img)\n                labels.append(class_name)\n    return np.array(images), np.array(labels)\n\nX, y = load_images(dest_dir, classes)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:21:40.872604Z","iopub.execute_input":"2024-12-18T19:21:40.873350Z","iopub.status.idle":"2024-12-18T19:22:45.542984Z","shell.execute_reply.started":"2024-12-18T19:21:40.873304Z","shell.execute_reply":"2024-12-18T19:22:45.542126Z"}},"outputs":[],"execution_count":80},{"cell_type":"markdown","source":"## **📁 Veri Bölme ve Klasör Yapısının Oluşturulması:**\n1. **Klasör Yapısı:**\n    * Hedef dizin **(target_dir)** ve alt dizinler **(train, val)** yoksa oluşturulur.\n    * Her sınıf için de ilgili train ve val dizinleri oluşturulur.\n\n📸 Resimlerin Eğitim ve Doğrulama Kümelerine Bölünmesi: \n\n2. **Görselleri Listeleme ve Karıştırma:**\n\n    * Her sınıf için görselleri listeleyip, karıştırıyoruz. Bu adım, eğitim ve doğrulama verilerinin rastgele seçilmesini sağlar.\n\n\n3. **Veri Kümesinin Bölünmesi:**\n    * Görsellerin %80'i eğitim, %20'si doğrulama kümesine ayrılır.\n    * **split_idx** hesaplanarak görseller bölünür.\n\n**📤 Görsellerin Kopyalanması:** \n\n4. Görselleri Kopyalama:\n\n    * Eğitim ve doğrulama kümelerine ayırdıktan sonra, her bir görsel ilgili dizine **(train_class_dir** ve **val_class_dir)** kopyalanır.\n\n🔄 Sonuç:\nBu işlem sonunda, kaynak dizindeki görseller eğitim ve doğrulama kümelerine bölünerek, her bir sınıf için doğru dizinlere yerleştirilmiş olur.","metadata":{}},{"cell_type":"code","source":"def split_data(source_dir, target_dir, classes, test_size=0.2):\n    \n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    \n    train_dir = os.path.join(target_dir, 'train')\n    val_dir = os.path.join(target_dir, 'val')\n    os.makedirs(train_dir, exist_ok=True)\n    os.makedirs(val_dir, exist_ok=True)\n    \n    for class_name in classes:\n        class_path = os.path.join(source_dir, class_name)\n        \n        \n        class_train_dir = os.path.join(train_dir, class_name)\n        class_val_dir = os.path.join(val_dir, class_name)\n        os.makedirs(class_train_dir, exist_ok=True)\n        os.makedirs(class_val_dir, exist_ok=True)\n        \n        \n        images = os.listdir(class_path)\n        random.shuffle(images)\n        \n        \n        split_idx = int(len(images) * (1 - test_size))\n        train_images = images[:split_idx]\n        val_images = images[split_idx:]\n        \n        \n        for img in train_images:\n            shutil.copy(os.path.join(class_path, img), class_train_dir)\n        for img in val_images:\n            shutil.copy(os.path.join(class_path, img), class_val_dir)\n\n\nsplit_data(source_dir, dest_dir, classes, test_size=0.2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:22:45.544512Z","iopub.execute_input":"2024-12-18T19:22:45.544904Z","iopub.status.idle":"2024-12-18T19:24:34.749324Z","shell.execute_reply.started":"2024-12-18T19:22:45.544865Z","shell.execute_reply":"2024-12-18T19:24:34.740324Z"}},"outputs":[],"execution_count":81},{"cell_type":"markdown","source":"## **🔢 Etiketlerin Sayısal Hale Getirilmesi:**\n1. **LabelEncoder ile Etiket Dönüşümü:**\n    * **LabelEncoder()** kullanılarak, etiketler **(y)** sayısal değerlere dönüştürülür. Bu, sınıfların metin etiketlerinden (örneğin, \"leopard\", \"dolphin\") sayısal değerlere (örneğin, 0, 1, 2) dönüştürülmesi anlamına gelir.\n    * **y_encoded = encoder.fit_transform(y)** ile her bir sınıf bir sayısal etiket ile eşleştirilir.\n\n🔄 **Etiketlerin Kategorik Formata Dönüştürülmesi:**\n\n2. **Kategorik Etiketler:**\n    * **to_categorical()** fonksiyonu kullanılarak sayısal etiketler (0-9 arası) birer one-hot encoded (biri dışında sıfır olan vektörler) hale getirilir.\n    * Örneğin, sınıf 3 için **[0, 0, 1, 0, ..., 0]** gibi bir vektör oluşturulur.\n\n📊 **Veri Kümesinin Eğitim ve Test Kümelerine Bölünmesi:**\n\n3. train_test_split:\n    * **train_test_split()** fonksiyonu ile görseller **(X)** ve etiketler **(y_categorical)** eğitim ve test kümesine ayrılır.\n    * **test_size=0.2** parametresi ile verinin %80'i eğitim, %20'si test kümesine ayrılır.\n    * **random_state=17** parametresi, işlem tekrarı için rastgelelikin sabit kalmasını sağlar.\n\n🔄 Sonuç:\nSonuç olarak, eğitim için kullanılan görseller **(X_train)**, test için kullanılan görseller **(X_test)**, eğitim etiketleri **(y_train)** ve test etiketleri **(y_test)** oluşturulur. Bu adım, modelin eğitim ve doğrulama süreçlerinde kullanılması için veri kümesinin doğru şekilde bölünmesini sağlar.","metadata":{}},{"cell_type":"code","source":"encoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\ny_categorical = to_categorical(y_encoded)\nX_train, X_test, y_train, y_test = train_test_split(X, y_categorical, test_size=0.2, random_state=17)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:24:34.757484Z","iopub.execute_input":"2024-12-18T19:24:34.757772Z","iopub.status.idle":"2024-12-18T19:24:38.747214Z","shell.execute_reply.started":"2024-12-18T19:24:34.757745Z","shell.execute_reply":"2024-12-18T19:24:38.746190Z"}},"outputs":[],"execution_count":82},{"cell_type":"markdown","source":"## 🛠️ **Veri Artırma ile Eğitim ve Doğrulama Veri Akışı (Data Generators)**\r\n\r\nBu adımda, `ImageDataGenerator` sınıfı kullanılarak görseller üzerinde çeşitli veri artırma teknikleri uygulanır ve modelin eğitim verilerine erişim sağlanır. İşlem adımları şu şekilde açıklanabilir:\r\n\r\n🔄 **Eğitim Verisi Akışı:**\r\n\r\nEğitim verileri üzerinde veri artırma işlemleri gerçekleştirilir. Bu, modelin daha güçlü ve genellenebilir olmasına yardımcı olur. Örneğin, görseller üzerinde döndürme, kaydırma, zoom yapma, parlaklık değişimi, renk kanalı kaydırması ve yatay çevrim gibi teknikler uygulanır. Bu sayede, model farklı veri çeşitliliği ile eğitilir ve daha iyi performans gösterir.\r\n\r\n🔄 **Doğrulama Verisi Akışı:**\r\n\r\nDoğrulama verileri üzerinde de benzer veri artırma teknikleri uygulanabilir. Bu sayede, doğrulama seti üzerinde de modelin genellenebilirliği artırılır.\r\n\r\n🚀 **Sonuç:**\r\n\r\nEğitim ve doğrulama verileri üzerinde yapılan veri artırma işlemleriyle, modelin daha fazla ve çeşitli veri görmesi sağlanır. Bu, modelin genel doğruluğunu artırır ve aşırı uyum (overfitting) riskini azaltır.","metadata":{}},{"cell_type":"code","source":"train_datagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    brightness_range=[0.5, 1.5],  # Parlaklık değişimi\n    channel_shift_range=50.0,     # Renk kanalı kaydırması\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\ntrain_datagen.fit(X_train)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:24:38.748369Z","iopub.execute_input":"2024-12-18T19:24:38.748650Z","iopub.status.idle":"2024-12-18T19:24:40.139083Z","shell.execute_reply.started":"2024-12-18T19:24:38.748624Z","shell.execute_reply":"2024-12-18T19:24:40.138247Z"}},"outputs":[],"execution_count":83},{"cell_type":"markdown","source":"## **🧠 CNN Modeli ve Eğitimi**\nBu bölümde, bir **Convolutional Neural Network (CNN)** modeli oluşturduk ve derledik. Model, görsel verileri işleyip sınıflandırmak için aşağıdaki katmanları içeriyor:\n\n* **Input Layer:** Görselleri 128x128 boyutlarında ve RGB formatında alır.\n* **Conv2D:** Görsellerdeki temel özellikleri (kenar, renk vb.) öğrenmek için filtreler uygular.\n* **MaxPooling2D:** Görsel boyutunu küçültüp işlem yükünü azaltır.\n* **Flatten:** 2D çıktıyı tek boyutlu vektöre dönüştürür.\n* **Dense Layers:** Öğrenilen özellikleri daha soyut seviyelerde temsil eder ve sınıflandırma yapar.\n* **Output Layer:** Her sınıf için bir tahmin yapar ve softmax fonksiyonu ile sonuçları normalize eder.\n\nModelin derlenmesi için **Adam optimizer** ve **categorical_crossentropy** kayıp fonksiyonu kullanıldı. Bu yapı, görsel sınıflandırma problemleri için uygun olup, doğruluk metriği ile başarısını değerlendirir.\n\neilmiştir.\r\n\r\n🔄 **Veri Artırma ve Eğitim Veri Akışı:**\r\n\r\n- **Veri Artırma (Data Augmentation):** Görseller üzerinde döndürme, yatay kaydırma, ve yatay çevrim gibi tekniklerle veri artırma yapılır. Bu, modelin daha fazla veri ile eğitilmesine olanak sağlar ve modelin genellenebilirliğini artırır.\r\n  \r\n- **Eğitim ve Test Jeneratörleri:** Eğitim verileri **train_generator** ile, test verileri ise **test_generator** ile işlenir. Bu jeneratörler, her seferinde belirli sayıda örnek (32) ile modelin eğitilmesini sağlar.\r\n\r\n🚀 **Sonuç:**\r\n\r\nModel, eğitim verileri üzerinde veri artırma işlemleriyle eğitilir ve test verileriyle doğrulama yapılır. Bu süreç, modelin genellenebilirliğini artırarak daha sağlam sonuçlar elde edilmesini sağlar.","metadata":{}},{"cell_type":"code","source":"model_cnn = models.Sequential([\n    layers.Input(shape=(128, 128, 3)),  \n    layers.Conv2D(32, (3, 3), activation='relu'),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Flatten(),  # Düzleştirme katmanı\n    layers.Dense(128, activation='relu'),\n    layers.Dense(len(classes), activation='softmax')  \n])\n\n\nmodel_cnn.compile(\n    optimizer='adam',  \n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=True\n)\n\n# Eğitim ve doğrulama jeneratörleri\ntrain_generator = datagen.flow(X_train, y_train, batch_size=32)\ntest_generator = datagen.flow(X_test, y_test, batch_size=32)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:24:40.140058Z","iopub.execute_input":"2024-12-18T19:24:40.140334Z","iopub.status.idle":"2024-12-18T19:24:41.272582Z","shell.execute_reply.started":"2024-12-18T19:24:40.140302Z","shell.execute_reply":"2024-12-18T19:24:41.271808Z"}},"outputs":[],"execution_count":84},{"cell_type":"markdown","source":"## 📈**Modelin Eğitimi ve Parametre Ayarları**\n\nBu adımda, modelimizi eğitmek için gerekli parametreler ayarlandı ve eğitim süreci başlatıldı.\n* **steps_per_epoch:** Eğitim verisetindeki toplam örnek sayısı (X_train) ile batch size (32) bölünerek bir epoch'ta kaç adım yapılacağı hesaplanır. Bu, modelin her epoch sırasında kaç kere eğitim verisi ile güncellenmesi gerektiğini belirler.\n\n* **validation_steps:** Test verisetindeki toplam örnek sayısı (X_test) ile batch size (32) bölünerek doğrulama adımlarının sayısı belirlenir.\n\nModelin eğitimi fit() fonksiyonu ile başlatıldı:\n\n* **train_generator:** Eğitim verilerini yükleyen ve işleyecek olan jeneratör.\n* **validation_generator:** Doğrulama verilerini yükleyen jeneratör.\n* **epochs:** Modelin 25 epoch boyunca eğitileceği belirtilmiş.\nEğitim sırasında her epoch'ta modelin doğruluk ve kayıp değerleri izlenir.","metadata":{}},{"cell_type":"code","source":"steps_per_epoch = len(X_train) // 32 \nvalidation_steps = len(X_test) // 32 \n\n\nhistory = model_cnn.fit(\n    train_generator,\n    validation_data=test_generator,\n    epochs=50,\n    steps_per_epoch=steps_per_epoch,\n    validation_steps=validation_steps\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:36:25.510601Z","iopub.execute_input":"2024-12-18T19:36:25.511014Z","iopub.status.idle":"2024-12-18T19:45:46.068064Z","shell.execute_reply.started":"2024-12-18T19:36:25.510982Z","shell.execute_reply":"2024-12-18T19:45:46.067316Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.5975 - loss: 1.2013 - val_accuracy: 0.5967 - val_loss: 1.2379\nEpoch 2/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87us/step - accuracy: 0.6562 - loss: 1.0708 - val_accuracy: 0.0000e+00 - val_loss: 1.6250\nEpoch 3/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6313 - loss: 1.1113 - val_accuracy: 0.6097 - val_loss: 1.1954\nEpoch 4/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 84us/step - accuracy: 0.7188 - loss: 1.0530 - val_accuracy: 0.0000e+00 - val_loss: 2.3598\nEpoch 5/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6429 - loss: 1.0599 - val_accuracy: 0.6090 - val_loss: 1.2445\nEpoch 6/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66us/step - accuracy: 0.5938 - loss: 1.0545 - val_accuracy: 1.0000 - val_loss: 1.0346\nEpoch 7/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6265 - loss: 1.1084 - val_accuracy: 0.6010 - val_loss: 1.2237\nEpoch 8/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65us/step - accuracy: 0.6875 - loss: 0.8076 - val_accuracy: 1.0000 - val_loss: 0.7143\nEpoch 9/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6383 - loss: 1.0706 - val_accuracy: 0.6003 - val_loss: 1.2073\nEpoch 10/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 67us/step - accuracy: 0.5938 - loss: 1.0608 - val_accuracy: 0.0000e+00 - val_loss: 3.5004\nEpoch 11/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 127ms/step - accuracy: 0.6452 - loss: 1.0401 - val_accuracy: 0.6097 - val_loss: 1.2040\nEpoch 12/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 62us/step - accuracy: 0.5000 - loss: 1.5851 - val_accuracy: 1.0000 - val_loss: 0.3126\nEpoch 13/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 127ms/step - accuracy: 0.6454 - loss: 1.0539 - val_accuracy: 0.6076 - val_loss: 1.1945\nEpoch 14/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63us/step - accuracy: 0.5938 - loss: 0.9986 - val_accuracy: 1.0000 - val_loss: 4.8876e-06\nEpoch 15/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6305 - loss: 1.0919 - val_accuracy: 0.5879 - val_loss: 1.2178\nEpoch 16/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 62us/step - accuracy: 0.6250 - loss: 0.9978 - val_accuracy: 1.0000 - val_loss: 0.0888\nEpoch 17/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6485 - loss: 1.0845 - val_accuracy: 0.6141 - val_loss: 1.2115\nEpoch 18/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63us/step - accuracy: 0.5938 - loss: 1.1212 - val_accuracy: 1.0000 - val_loss: 1.5508\nEpoch 19/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 127ms/step - accuracy: 0.6412 - loss: 1.0600 - val_accuracy: 0.5792 - val_loss: 1.2542\nEpoch 20/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66us/step - accuracy: 0.5312 - loss: 1.0895 - val_accuracy: 0.0000e+00 - val_loss: 1.7528\nEpoch 21/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6365 - loss: 1.0610 - val_accuracy: 0.5858 - val_loss: 1.2184\nEpoch 22/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66us/step - accuracy: 0.5625 - loss: 1.0578 - val_accuracy: 1.0000 - val_loss: 0.8924\nEpoch 23/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 127ms/step - accuracy: 0.6548 - loss: 1.0156 - val_accuracy: 0.6083 - val_loss: 1.2187\nEpoch 24/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63us/step - accuracy: 0.5625 - loss: 1.2496 - val_accuracy: 1.0000 - val_loss: 0.7378\nEpoch 25/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 127ms/step - accuracy: 0.6480 - loss: 1.0594 - val_accuracy: 0.6076 - val_loss: 1.1938\nEpoch 26/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 62us/step - accuracy: 0.6250 - loss: 1.0541 - val_accuracy: 0.0000e+00 - val_loss: 3.2766\nEpoch 27/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6683 - loss: 0.9902 - val_accuracy: 0.5967 - val_loss: 1.2183\nEpoch 28/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63us/step - accuracy: 0.5938 - loss: 1.0910 - val_accuracy: 1.0000 - val_loss: 0.3950\nEpoch 29/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6581 - loss: 1.0333 - val_accuracy: 0.5988 - val_loss: 1.2430\nEpoch 30/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64us/step - accuracy: 0.6562 - loss: 1.0328 - val_accuracy: 0.0000e+00 - val_loss: 2.3857\nEpoch 31/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6549 - loss: 1.0197 - val_accuracy: 0.6141 - val_loss: 1.2015\nEpoch 32/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65us/step - accuracy: 0.5625 - loss: 1.7372 - val_accuracy: 1.0000 - val_loss: 1.0017\nEpoch 33/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6735 - loss: 0.9754 - val_accuracy: 0.6206 - val_loss: 1.1830\nEpoch 34/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 79us/step - accuracy: 0.6562 - loss: 1.0194 - val_accuracy: 1.0000 - val_loss: 0.1289\nEpoch 35/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6712 - loss: 0.9653 - val_accuracy: 0.6243 - val_loss: 1.1691\nEpoch 36/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66us/step - accuracy: 0.7188 - loss: 0.8997 - val_accuracy: 1.0000 - val_loss: 0.8558\nEpoch 37/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6740 - loss: 1.0002 - val_accuracy: 0.6112 - val_loss: 1.1665\nEpoch 38/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63us/step - accuracy: 0.6250 - loss: 1.2955 - val_accuracy: 1.0000 - val_loss: 0.6236\nEpoch 39/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6609 - loss: 1.0268 - val_accuracy: 0.6185 - val_loss: 1.1939\nEpoch 40/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 76us/step - accuracy: 0.5625 - loss: 1.0019 - val_accuracy: 1.0000 - val_loss: 0.5097\nEpoch 41/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 126ms/step - accuracy: 0.6742 - loss: 0.9629 - val_accuracy: 0.6148 - val_loss: 1.2035\nEpoch 42/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66us/step - accuracy: 0.5938 - loss: 1.0543 - val_accuracy: 0.0000e+00 - val_loss: 1.8918\nEpoch 43/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6556 - loss: 1.0099 - val_accuracy: 0.6090 - val_loss: 1.2163\nEpoch 44/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63us/step - accuracy: 0.6562 - loss: 0.9454 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 45/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6811 - loss: 0.9640 - val_accuracy: 0.6344 - val_loss: 1.1424\nEpoch 46/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 75us/step - accuracy: 0.6562 - loss: 0.7852 - val_accuracy: 1.0000 - val_loss: 0.7266\nEpoch 47/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6775 - loss: 0.9446 - val_accuracy: 0.6315 - val_loss: 1.1277\nEpoch 48/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 62us/step - accuracy: 0.5938 - loss: 1.1147 - val_accuracy: 1.0000 - val_loss: 6.0564e-04\nEpoch 49/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 125ms/step - accuracy: 0.6839 - loss: 0.9421 - val_accuracy: 0.6395 - val_loss: 1.1334\nEpoch 50/50\n\u001b[1m172/172\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 70us/step - accuracy: 0.6250 - loss: 1.0268 - val_accuracy: 0.0000e+00 - val_loss: 2.2977\n","output_type":"stream"}],"execution_count":90},{"cell_type":"markdown","source":"## **📊Eğitim Sonuçlarının Görselleştirilmesi**\r\n\r\nBu adımda, modelin eğitim ve doğrulama doğruluğu ile kayıp değerlerini görselleştirdik. Eğitim sürecinin nasıl ilerlediğini değerlendirmek için doğruluk ve kayıp eğrilerini çizdik. \r\n\r\n- **Doğruluk Eğrisi**: Eğitim ve doğrulama doğruluğu arasındaki farkı gösteriyor. Modelin doğruluğunun nasıl arttığını gözlemleyebilirsiniz.\r\n- **Kayıp Eğrisi**: Eğitim ve doğrulama kayıplarını gösterir. Eğitim sırasında modelin kaybının nasıl azaldığını ve doğrulama kaybının durumunu inceleyebilirsiniz.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Train Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend()\nplt.title('Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend()\nplt.title('Loss')\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:46:01.156743Z","iopub.execute_input":"2024-12-18T19:46:01.157558Z","iopub.status.idle":"2024-12-18T19:46:01.541122Z","shell.execute_reply.started":"2024-12-18T19:46:01.157525Z","shell.execute_reply":"2024-12-18T19:46:01.540302Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":"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C7iSxZq3iAdjt9thMpk67HvJJZdgyZIl+O1vf4uPP/4Yy5cvF5Kc+Xw+zeOaNWsWvvnmG5w4cQKHDh3C2rVryUpNEARBEFFm0qRJOHToEObPn49hw4bhH//4B8455xz84x//EPa5//77sX//fsybNw8pKSl49NFHMXjwYMEzjSCI8FCiMoKIIu+88w6Kiorw6quvdnjto48+wuLFi/HGG2+gb9++2LlzZ8j36tu3L9atWwe32w2r1Sq7T25uLgAuk7iYY8eOqR7zjh07sH//fvzrX//CrFmzhO3iTKEABJezcOMGgJ/85Cd44IEH8N///hdtbW2wWq244YYbVI+JIAiCIAiOwsJCpKWlYd++fR1e27t3L0wmE8rKyoRteXl5uO2223DbbbehubkZkyZNwhNPPIE777xT2Kdv37548MEH8eCDD+LAgQMYOXIkXnjhBfznP/+JyWciiM4OWaoJIkq0tbXho48+wo9+9CNcd911Hf7mzJmDpqYmfPrpp7j22muxbds22dJTLMsC4LJznj17Fq+88oriPr169YLZbMa3334ref21115TPW6z2Sx5T/7/l19+WbJfYWEhJk2ahPnz56OyslJ2PDwFBQWYPn06/vOf/+Cdd97BZZddhoKCAtVjIgiCIAiCw2w249JLL8Unn3wiKXtVXV2NhQsXYuLEicjKygIA1NbWStpmZGSgX79+cDqdAIDW1la0t7dL9unbty8yMzOFfQiCCA9ZqgkiSnz66adoamrClVdeKfv6+eefj8LCQrzzzjtYuHAhPvjgA8ycORO33347Ro8ejbq6Onz66ad44403UFFRgVmzZuHtt9/GAw88gPXr1+OCCy5AS0sLvvrqK/y///f/cNVVVyE7OxszZ87EX//6VzAMg759++Kzzz5DTU2N6nEPGjQIffv2xUMPPYSTJ08iKysLH374oWwCk7/85S+YOHEizjnnHNx9993o3bs3jh49iiVLlmDr1q2SfWfNmoXrrrsOAPD000+rP5AEQRAE0UWZP38+li5d2mH7E088geXLl2PixIn4f//v/8FiseBvf/sbnE4nnn32WWG/IUOGYPLkyRg9ejTy8vKwceNGfPDBB5gzZw4AYP/+/ZgyZQquv/56DBkyBBaLBYsXL0Z1dTV+8pOfxOxzEkSnJ56pxwkimZkxYwabkpLCtrS0KO5z6623slar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"},"metadata":{}}],"execution_count":91},{"cell_type":"markdown","source":"## **🖼️Görsellerin Manipüle Edilmesi ve Test Sonuçlarının Değerlendirilmesi**\r\n\r\nBu adımda görseller üzerinde manipülasyon yaparak modelin performansını değerlendirdik:\r\n\r\n- **Kontrast Artırma**: Görsellerin kontrastı artırılarak daha belirgin hale getirildi. 🎨\r\n- **Döndürme**: Görseller saat yönünde 90 derece döndürüldü. 🔄\r\n- **Manipüle Edilmiş Görsellerin Testi**: Görsellerde yapılan bu değişiklikler modelin doğruluğunu nasıl etkilediğini görmek için test setinde model değerlendirildi. 📊\r\n\r\n📌 **Amaç**: Modelin manipüle edilmiş görseller üzerindeki dayanıklılığını ve performansını analiz etmek.","metadata":{}},{"cell_type":"code","source":"def manipulate_images_v2(images):\n    manipulated_images = []\n    for img in images:\n        manipulated = cv2.convertScaleAbs(img, alpha=2.0, beta=0)  # Kontrast artırma\n        manipulated = cv2.rotate(manipulated, cv2.ROTATE_90_CLOCKWISE)  # Döndürme\n        manipulated_images.append(manipulated)\n    return np.array(manipulated_images)\n\n\nX_test_manipulated_v2 = manipulate_images_v2(X_test)\n\n\nmanipulated_loss_v2, manipulated_accuracy_v2 = model_cnn.evaluate(X_test_manipulated_v2, y_test)\nprint(f\"Manipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): {manipulated_accuracy_v2 * 100:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:46:34.429457Z","iopub.execute_input":"2024-12-18T19:46:34.430348Z","iopub.status.idle":"2024-12-18T19:46:36.062626Z","shell.execute_reply.started":"2024-12-18T19:46:34.430303Z","shell.execute_reply":"2024-12-18T19:46:36.061740Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.2200 - loss: 13.1139\nManipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): 20.41%\n","output_type":"stream"}],"execution_count":92},{"cell_type":"markdown","source":"## **🎨Renk Sabitliği Uygulaması ve Model Performansı**\r\n\r\nBu adımda manipüle edilmiş görsellere renk sabitliği uygulayarak modelin performansını değerlendirdik:\r\n\r\n- **Renk Sabitliği**: Görsellerin renk dengesi ayarlandı, her renk kanalındaki ortalama değerlere göre ölçeklendirme yapıldı. 🌈\r\n- **Amaç**: Manipülasyon sonrası renk bozulmalarını düzelterek modelin doğruluğunu artırmak. 🔧\r\n- **Sonuçların Karşılaştırılması**: Renk sabitliği uygulanmış test seti ile model performansı yeniden ölçüldü. 📈\r\n\r\n📌 **Sonuç**: Bu adım, manipülasyondan etkilenen görseller üzerinde renk sabitliğinin etkisini analiz etmeyi amaçlar.","metadata":{}},{"cell_type":"code","source":"def apply_color_correction(image):\n    avg_b, avg_g, avg_r = cv2.mean(image)[:3]\n    scale_b = 1.0 / (avg_b + 1e-5)\n    scale_g = 1.0 / (avg_g + 1e-5)\n    scale_r = 1.0 / (avg_r + 1e-5)\n    corrected_image = image * np.array([scale_b, scale_g, scale_r])\n    corrected_image = np.clip(corrected_image, 0, 255).astype(np.uint8)\n    return corrected_image\n\n\nX_test_corrected_v2 = np.array([apply_color_correction(img) for img in X_test_manipulated_v2])\n\n\ncorrected_loss_v2, corrected_accuracy_v2 = model_cnn.evaluate(X_test_corrected_v2, y_test)\nprint(f\"Renk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): {corrected_accuracy_v2 * 100:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:46:54.743995Z","iopub.execute_input":"2024-12-18T19:46:54.744654Z","iopub.status.idle":"2024-12-18T19:46:55.515363Z","shell.execute_reply.started":"2024-12-18T19:46:54.744618Z","shell.execute_reply":"2024-12-18T19:46:55.514567Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.0945 - loss: 49.2022\nRenk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): 8.71%\n","output_type":"stream"}],"execution_count":94},{"cell_type":"markdown","source":"## **📊Model Doğruluk Sonuçlarının Karşılaştırılması**\r\n\r\nBu aşamada, modelin farklı veri kümeleri üzerindeki performansı karşılaştırıldı:\r\n\r\n1. **Orijinal Test Seti**  \r\n   - Model, hiçbir manipülasyon yapılmamış test seti üzerinde değerlendirildi.  \r\n   - **Amaç**: Modelin temel doğruluğunu ölçmek. ✅  \r\n   - **Sonuç**: Orijinal test seti doğruluğu: **5.40%**\r\n\r\n2. **Manipüle Edilmiş Test Seti (Kontrast + Döndürme)**  \r\n   - Görseller üzerinde kontrast artırma ve döndürme işlemleri uygulandı.  \r\n   - **Amaç**: Modelin veri manipülasyonlarına karşı dayanıklılığını ölçmek. 🔄  \r\n   - **Sonuç**: Manipüle edilmiş test seti doğruluğu: **5.01%**\r\n\r\n3. **Renk Sabitliği Uygulanmış Test Seti**  \r\n   - Manipüle edilmiş görsellere renk sabitliği uygulandı.  \r\n   - **Amaç**: Manipülasyon sonrası görsellerin renk dengesi düzeltilerek model doğruluğunu artırmak. 🌈  \r\n   - **Sonuç**: Renk sabitliği uygulanmış test seti doğruluğu: **7.28%**\r\n\r\n📌 **Nihai Sonuçlar**:  \r\n- **Orijinal** ve **manipüle edilmiş** test setleri arasında ufak bir doğruluk kaybı gözlemlendi.  \r\n- **Renk sabitliği** uygulandığında, doğruluk belirgin şekilde artırıldı.  \r\nBu sonuçlar, modelin manipülasyonlara duyarlı olduğunu ancak renk düzenlemeleri ile performansının iyileştirilebileceğini gösteriyor.","metadata":{}},{"cell_type":"code","source":"\nloss, test_accuracy = model_cnn.evaluate(X_test, y_test)\nprint(f\"Orijinal Test Seti Doğruluğu: {test_accuracy * 100:.2f}%\")\n\n\nmanipulated_loss_v2, manipulated_accuracy_v2 = model_cnn.evaluate(X_test_manipulated_v2, y_test)\nprint(f\"Manipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): {manipulated_accuracy_v2 * 100:.2f}%\")\n\n\ncorrected_loss_v2, corrected_accuracy_v2 = model_cnn.evaluate(X_test_corrected_v2, y_test)\nprint(f\"Renk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): {corrected_accuracy_v2 * 100:.2f}%\")\n\n\nprint(\"\\nSonuçlar:\")\nprint(f\"Orijinal Test Seti Doğruluğu: {test_accuracy * 100:.2f}%\")\nprint(f\"Manipüle Edilmiş Test Seti Doğruluğu (Kontrast + Döndürme): {manipulated_accuracy_v2 * 100:.2f}%\")\nprint(f\"Renk Sabitliği Uygulanmış Test Seti (Manipüle Edilmiş): {corrected_accuracy_v2 * 100:.2f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T19:47:22.999841Z","iopub.execute_input":"2024-12-18T19:47:23.000602Z","iopub.status.idle":"2024-12-18T19:47:25.216678Z","shell.execute_reply.started":"2024-12-18T19:47:23.000567Z","shell.execute_reply":"2024-12-18T19:47:25.215881Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.6284 - loss: 1.2250\nOrijinal Test Seti Doğruluğu: 61.80%\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.2200 - loss: 13.1139\nManipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): 20.41%\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.0945 - loss: 49.2022\nRenk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): 8.71%\n\nSonuçlar:\nOrijinal Test Seti Doğruluğu: 61.80%\nManipüle Edilmiş Test Seti Doğruluğu (Kontrast + Döndürme): 20.41%\nRenk Sabitliği Uygulanmış Test Seti (Manipüle Edilmiş): 8.71%\n","output_type":"stream"}],"execution_count":95}]}