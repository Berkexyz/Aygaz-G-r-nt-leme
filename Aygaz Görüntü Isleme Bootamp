{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":2333429,"sourceType":"datasetVersion","datasetId":1408532}],"dockerImageVersionId":30805,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 🐾 Proje: Aygaz Görüntü İşleme Kampı 🔍","metadata":{}},{"cell_type":"markdown","source":"📌 **Projenin Amacı ve Kapsamı**:\n\nBu proje, **görüntü işleme ve derin öğrenme** tekniklerini kullanarak çeşitli hayvanları sınıflandırmaya yönelik bir model geliştirmeyi amaçlamaktadır. Aygaz Görüntü İşleme Kampı'nda öğrendiğimiz yöntemleri uygulayarak, farklı hayvan türlerini doğru şekilde sınıflandırabilen bir yapay zeka modelinin eğitilmesi hedeflenmiştir. 🐯🐶🐱\n\nProje kapsamında:\n\n* **Hayvan türleri**: Leopar, Dolphin, Aslan, Tilki, Moose, Tavşan, At, Sincap, Yarasa, ve Goril gibi 10 farklı hayvan türü sınıflandırılmaktadır. 🦁🦊🦏\n\n* **Veri Seti**: Bu proje, hayvan görselleri içeren geniş bir veri setini kullanarak, her bir görseli etiketleyerek modelin doğruluğunu artırmayı hedeflemiştir.\n\n* **Görüntü İşleme Teknikleri**: Görüntülerin parlaklık artırma, renk sabitliği uygulama gibi manipülasyonlarla modellenin dayanıklılığı test edilmiştir. 🔧💡","metadata":{}},{"cell_type":"markdown","source":"## **🛠️ Gerekli Kütüphaneler ve İşlevleri:**\n* **os, shutil**: Dosya ve klasör yönetimi işlemleri için.\n* **cv2 (OpenCV)**: Görüntü işleme ve boyutlandırma için.\n* **numpy**: Sayısal hesaplamalar ve veri manipülasyonu için.\n* **ImageDataGenerator**: Görüntü veri artırma (augmentation) için.\n* **train_test_split**: Eğitim ve test veri setlerini ayırmak için.\n* **Model, Dense, Flatten, Dropout, BatchNormalization**: Model katmanlarını oluşturmak için Keras araçları.\n* **matplotlib**: Sonuçları görselleştirmek için.\n* **keras**: Derin öğrenme modelleme ve işlevsellik için.\n* **models, layers**: Keras ile model ve katmanlar oluşturmak için.","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport shutil\nimport random\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow import keras\nfrom tensorflow.keras import models, layers\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:33:31.678702Z","iopub.execute_input":"2024-12-18T15:33:31.679047Z","iopub.status.idle":"2024-12-18T15:33:31.685123Z","shell.execute_reply.started":"2024-12-18T15:33:31.679016Z","shell.execute_reply":"2024-12-18T15:33:31.684191Z"}},"outputs":[],"execution_count":93},{"cell_type":"markdown","source":"## **Veri Setinin Hazılanması**\n10 Hayvan türünü veri setimizden seçip klasöre taşıyoruz.\n1. **Değişkenler ve Parametreler**:\n\n    * **image_size**: Görüntülerin boyutları (128, 128) olarak ayarlanır. 🖼️\n    * **classes**: Sınıf isimleri (hayvan türleri) belirlenir. 🐆🦅\n    * **images_per_class**: Her sınıf için kullanılacak görüntü sayısı (650). 🖼️\n    * **source_dir**: Veri setinin bulunduğu kaynak dizin. 📂\n    * **train_dir ve val_dir**: Eğitim ve doğrulama verilerinin depolanacağı dizinler. 📁\n\n\n2. **Veri Hazırlama Fonksiyonu (prepare_dataset)**:\n\n    * **validation_split**: Eğitim ve doğrulama verilerini ayıran oran (varsayılan %20). 📊\n\n\n3. **Dizin Oluşturma**:\n\n    * **train_dir** ve **val_dir** içinde her sınıf için uygun alt dizinler oluşturulur. 📂\n\n\n4. **Resimlerin Seçilmesi ve Karıştırılması**:\n\n    * Her sınıftan **650** kadar görüntü seçilir. 🖼️\n    * Görüntüler rastgele karıştırılır (veri çeşitliliği sağlamak için). 🔀\n\n\n5. **Eğitim ve Doğrulama Verisi Ayırma**:\n\n    * Görüntüler, validation_split oranına göre eğitim ve doğrulama verilerine ayrılır. 📊\n\n\n6. **Görüntüleri Eğitim ve Doğrulama Dizine Kopyalama**:\n\n    * Seçilen eğitim ve doğrulama verileri uygun dizinlere kopyalanır. 📤📥\n\n\n7. **Başarıyla Veri Seti Hazırlama**:\n\n    * Veri seti başarıyla hazırlandığında kullanıcıya bilgi verilir. ✅\n","metadata":{}},{"cell_type":"code","source":"image_size = (128, 128)\nclasses = [\"leopard\", \"dolphin\", \"lion\", \"fox\", \"moose\", \"rabbit\", \"horse\", \"squirrel\", \"bat\", \"gorilla\"]\nimages_per_class = 650\nsource_dir = \"/kaggle/input/animals-with-attributes-2/Animals_with_Attributes2/JPEGImages\"\ntrain_dir = \"/kaggle/FImages/FilteredImages/train\"\nval_dir = \"/kaggle/FImages/FilteredImages/val\"\ndef prepare_dataset(validation_split=0.2):\n    os.makedirs(train_dir, exist_ok=True)\n    os.makedirs(val_dir, exist_ok=True)\n    \n    for class_name in classes:\n        class_path = os.path.join(source_dir, class_name)\n        train_class_path = os.path.join(train_dir, class_name)\n        val_class_path = os.path.join(val_dir, class_name)\n\n        os.makedirs(train_class_path, exist_ok=True)\n        os.makedirs(val_class_path, exist_ok=True)\n        \n        images = os.listdir(class_path)[:images_per_class]\n        random.shuffle(images)\n        \n        split_index = int(len(images) * (1 - validation_split))\n        \n\n        for file_name in images[:split_index]:\n            file_path = os.path.join(class_path, file_name)\n            if os.path.isfile(file_path):\n                shutil.copy(file_path, os.path.join(train_class_path, file_name))\n        \n        \n        for file_name in images[split_index:]:\n            file_path = os.path.join(class_path, file_name)\n            if os.path.isfile(file_path):\n                shutil.copy(file_path, os.path.join(val_class_path, file_name))\n    \n    print(\"Dataset prepared successfully!\")\n\n\nprepare_dataset()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:33:31.694222Z","iopub.execute_input":"2024-12-18T15:33:31.694487Z","iopub.status.idle":"2024-12-18T15:33:49.016982Z","shell.execute_reply.started":"2024-12-18T15:33:31.694462Z","shell.execute_reply":"2024-12-18T15:33:49.016093Z"}},"outputs":[{"name":"stdout","text":"Dataset prepared successfully!\n","output_type":"stream"}],"execution_count":94},{"cell_type":"markdown","source":"## 🔄**GÖRSELLERİN YÜKLENMESİ 🧩**\nBu adımda, görselleri yükleyip uygun şekilde etiketliyoruz, böylece modelin eğitiminde kullanılacak hale getiriyoruz. 🚀\n\n📌 İşlemler:\n1. **Görsel Yükleme**: cv2.imread() ile her bir sınıfın görselleri okunur. 📂\n2. **Normalizasyon**: Görseller, modelin daha verimli öğrenmesi için 0-1 aralığına normalleştirilir (img = img / 255.0). ⚖️\n3. **Etiketleme**: Her görsel, ait olduğu sınıfın adı ile etiketlenir. 🏷️\n\n📍 Sonuçlar:\n* **X**: Ön işlenmiş tüm görseller.\n* **y**: Her görselin doğru sınıf etiketi.","metadata":{}},{"cell_type":"code","source":"def load_images(data_dir):\n    images = []\n    labels = []\n    for class_name in os.listdir(data_dir):\n        class_path = os.path.join(data_dir, class_name)\n        for file_name in os.listdir(class_path):\n            img_path = os.path.join(class_path, file_name)\n            img = cv2.imread(img_path)\n            if img is not None:\n                img = img / 255.0  \n                images.append(img)\n                labels.append(class_name)\n    return np.array(images), np.array(labels)\n\nX, y = load_images(train_dir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:33:49.018372Z","iopub.execute_input":"2024-12-18T15:33:49.018669Z","iopub.status.idle":"2024-12-18T15:34:01.318474Z","shell.execute_reply.started":"2024-12-18T15:33:49.018641Z","shell.execute_reply":"2024-12-18T15:34:01.317470Z"}},"outputs":[],"execution_count":95},{"cell_type":"markdown","source":"## **📁 Veri Bölme ve Klasör Yapısının Oluşturulması:**\n1. **Klasör Yapısı:**\n    * Hedef dizin **(target_dir)** ve alt dizinler **(train, val)** yoksa oluşturulur.\n    * Her sınıf için de ilgili train ve val dizinleri oluşturulur.\n\n📸 Resimlerin Eğitim ve Doğrulama Kümelerine Bölünmesi: \n\n2. **Görselleri Listeleme ve Karıştırma:**\n\n    * Her sınıf için görselleri listeleyip, karıştırıyoruz. Bu adım, eğitim ve doğrulama verilerinin rastgele seçilmesini sağlar.\n\n\n3. **Veri Kümesinin Bölünmesi:**\n    * Görsellerin %80'i eğitim, %20'si doğrulama kümesine ayrılır.\n    * **split_idx** hesaplanarak görseller bölünür.\n\n**📤 Görsellerin Kopyalanması:** \n\n4. Görselleri Kopyalama:\n\n    * Eğitim ve doğrulama kümelerine ayırdıktan sonra, her bir görsel ilgili dizine **(train_class_dir** ve **val_class_dir)** kopyalanır.\n\n🔄 Sonuç:\nBu işlem sonunda, kaynak dizindeki görseller eğitim ve doğrulama kümelerine bölünerek, her bir sınıf için doğru dizinlere yerleştirilmiş olur.","metadata":{}},{"cell_type":"code","source":"def split_data(source_dir, target_dir, classes, test_size=0.2):\n    \n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    \n    \n    train_dir = os.path.join(target_dir, 'train')\n    val_dir = os.path.join(target_dir, 'val')\n    os.makedirs(train_dir, exist_ok=True)\n    os.makedirs(val_dir, exist_ok=True)\n    \n    for class_name in classes:\n        class_path = os.path.join(source_dir, class_name)\n        \n        \n        class_train_dir = os.path.join(train_dir, class_name)\n        class_val_dir = os.path.join(val_dir, class_name)\n        os.makedirs(class_train_dir, exist_ok=True)\n        os.makedirs(class_val_dir, exist_ok=True)\n        \n        \n        images = os.listdir(class_path)\n        random.shuffle(images)\n        \n        \n        split_idx = int(len(images) * (1 - test_size))\n        train_images = images[:split_idx]\n        val_images = images[split_idx:]\n        \n        \n        for img in train_images:\n            shutil.copy(os.path.join(class_path, img), class_train_dir)\n        for img in val_images:\n            shutil.copy(os.path.join(class_path, img), class_val_dir)\n\n\nsplit_data(source_dir, target_dir, classes, test_size=0.2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:34:01.319850Z","iopub.execute_input":"2024-12-18T15:34:01.320261Z","iopub.status.idle":"2024-12-18T15:34:43.626521Z","shell.execute_reply.started":"2024-12-18T15:34:01.320222Z","shell.execute_reply":"2024-12-18T15:34:43.625754Z"}},"outputs":[],"execution_count":96},{"cell_type":"markdown","source":"## **🔢 Etiketlerin Sayısal Hale Getirilmesi:**\n1. **LabelEncoder ile Etiket Dönüşümü:**\n    * **LabelEncoder()** kullanılarak, etiketler **(y)** sayısal değerlere dönüştürülür. Bu, sınıfların metin etiketlerinden (örneğin, \"leopard\", \"dolphin\") sayısal değerlere (örneğin, 0, 1, 2) dönüştürülmesi anlamına gelir.\n    * **y_encoded = encoder.fit_transform(y)** ile her bir sınıf bir sayısal etiket ile eşleştirilir.\n\n🔄 **Etiketlerin Kategorik Formata Dönüştürülmesi:**\n\n2. **Kategorik Etiketler:**\n    * **to_categorical()** fonksiyonu kullanılarak sayısal etiketler (0-9 arası) birer one-hot encoded (biri dışında sıfır olan vektörler) hale getirilir.\n    * Örneğin, sınıf 3 için **[0, 0, 1, 0, ..., 0]** gibi bir vektör oluşturulur.\n\n📊 **Veri Kümesinin Eğitim ve Test Kümelerine Bölünmesi:**\n\n3. train_test_split:\n    * **train_test_split()** fonksiyonu ile görseller **(X)** ve etiketler **(y_categorical)** eğitim ve test kümesine ayrılır.\n    * **test_size=0.2** parametresi ile verinin %80'i eğitim, %20'si test kümesine ayrılır.\n    * **random_state=17** parametresi, işlem tekrarı için rastgelelikin sabit kalmasını sağlar.\n\n🔄 Sonuç:\nSonuç olarak, eğitim için kullanılan görseller **(X_train)**, test için kullanılan görseller **(X_test)**, eğitim etiketleri **(y_train)** ve test etiketleri **(y_test)** oluşturulur. Bu adım, modelin eğitim ve doğrulama süreçlerinde kullanılması için veri kümesinin doğru şekilde bölünmesini sağlar.","metadata":{}},{"cell_type":"code","source":"encoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\ny_categorical = to_categorical(y_encoded)\nX_train, X_test, y_train, y_test = train_test_split(X, y_categorical, test_size=0.2, random_state=17)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:34:43.628220Z","iopub.execute_input":"2024-12-18T15:34:43.628512Z","iopub.status.idle":"2024-12-18T15:34:47.817527Z","shell.execute_reply.started":"2024-12-18T15:34:43.628486Z","shell.execute_reply":"2024-12-18T15:34:47.816495Z"}},"outputs":[],"execution_count":97},{"cell_type":"markdown","source":"## **🛠️ Veri Artırma ile Eğitim ve Doğrulama Veri Akışı (Data Generators)**\n\nBu adımda, **ImageDataGenerator** sınıfı kullanılarak veri artırma işlemi ile birlikte, modelin eğitim ve doğrulama verilerine erişim sağlanır. İşlem adımları şu şekilde açıklanabilir:\n\n\n**🔄 Veri Artırma ile Eğitim Verisi Akışı:**\n1. **ImageDataGenerator Oluşturulması:**\n\n    * **data_gen = ImageDataGenerator(...):** Görseller üzerinde yapılan veri artırma tekniklerini tanımlar (normalize etme, döndürme, kaydırma, zoom, yatay çevrim). Bu adım, modelin daha güçlü ve genellenebilir olmasını sağlar.\n2. **Eğitim Verisi Akışının Oluşturulması:**\n\n    * **train_generator = data_gen.flow_from_directory(...):** Bu komut, **train** dizinindeki eğitim verilerini okur ve belirtilen artırma işlemleri ile birlikte eğitim süreci için hazırlar.\n    * **Parametreler:**\n        * **directory**: Eğitim verilerinin bulunduğu dizin. **(target_dir + 'train')**\n        * **target_size=(128, 128):** Görsellerin boyutunu 128x128 piksel olarak ayarlar. Bu, modelin giriş boyutuyla uyumludur.\n        * **batch_size=32:** Eğitim sırasında her adımda kullanılacak örnek sayısını 32 olarak belirler. Bu, eğitim hızını etkiler.\n        * **class_mode='categorical':** Her örneği çok sınıflı (kategorik) sınıf etiketine göre sınıflandırır.\n\n**🔄 Doğrulama Verisi Akışı:**\n1. **Doğrulama Verisi Akışının Oluşturulması:**\n    * **validation_generator = data_gen.flow_from_directory(...):** Bu komut, **val** dizinindeki doğrulama verilerini okur ve yine veri artırma işlemleriyle hazırlar.\n    * **Parametreler:**\n        * **directory:** Doğrulama verilerinin bulunduğu dizin. (target_dir + 'val')\n        * **target_size=(128, 128):** Görsellerin boyutunu 128x128 olarak ayarlama.\n        * **batch_size=32:** Doğrulama setinde her adımda kullanılacak örnek sayısı.\n        * **class_mode='categorical':** Doğrulama verilerini çok sınıflı (kategorik) sınıf etiketlerine göre sınıflandırır.\n\n**🚀 Sonuç:**\n* **train_generator** ve **validation_generator** nesneleri oluşturularak, eğitim ve doğrulama verilerine düzenli bir şekilde erişim sağlanır. Veri artırma teknikleriyle zenginleştirilmiş bu akışlar, modelin daha fazla veri görmesini ve daha iyi öğrenmesini sağlar.","metadata":{}},{"cell_type":"code","source":"data_gen = ImageDataGenerator(\n    rescale=1./255,  \n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n)\n\ndata_gen.fit(X_train)\ntrain_generator = data_gen.flow_from_directory(\n    directory=os.path.join(target_dir, 'train'),\n    target_size=(128, 128),  \n    batch_size=32,\n    class_mode='categorical'\n)\n\nvalidation_generator = data_gen.flow_from_directory(\n    directory=os.path.join(target_dir, 'val'),\n    target_size=(128, 128),  \n    batch_size=32,\n    class_mode='categorical'\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:34:47.818881Z","iopub.execute_input":"2024-12-18T15:34:47.819607Z","iopub.status.idle":"2024-12-18T15:34:49.817438Z","shell.execute_reply.started":"2024-12-18T15:34:47.819564Z","shell.execute_reply":"2024-12-18T15:34:49.816788Z"}},"outputs":[{"name":"stdout","text":"Found 9204 images belonging to 10 classes.\nFound 5659 images belonging to 10 classes.\n","output_type":"stream"}],"execution_count":98},{"cell_type":"markdown","source":"## **🧠 CNN Modeli ve Eğitimi**\nBu bölümde, bir **Convolutional Neural Network (CNN)** modeli oluşturduk ve derledik. Model, görsel verileri işleyip sınıflandırmak için aşağıdaki katmanları içeriyor:\n\n* **Input Layer:** Görselleri 128x128 boyutlarında ve RGB formatında alır.\n* **Conv2D:** Görsellerdeki temel özellikleri (kenar, renk vb.) öğrenmek için filtreler uygular.\n* **MaxPooling2D:** Görsel boyutunu küçültüp işlem yükünü azaltır.\n* **Flatten:** 2D çıktıyı tek boyutlu vektöre dönüştürür.\n* **Dense Layers:** Öğrenilen özellikleri daha soyut seviyelerde temsil eder ve sınıflandırma yapar.\n* **Output Layer:** Her sınıf için bir tahmin yapar ve softmax fonksiyonu ile sonuçları normalize eder.\n\nModelin derlenmesi için **Adam optimizer** ve **categorical_crossentropy** kayıp fonksiyonu kullanıldı. Bu yapı, görsel sınıflandırma problemleri için uygun olup, doğruluk metriği ile başarısını değerlendirir.","metadata":{}},{"cell_type":"code","source":"model_cnn = models.Sequential([\n    layers.InputLayer(input_shape=(128, 128, 3)),  \n    layers.Conv2D(32, (3, 3), activation='relu'),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Flatten(),  # Düzleştirme katmanı\n    layers.Dense(128, activation='relu'),\n    layers.Dense(len(classes), activation='softmax')  \n])\n\n\nmodel_cnn.compile(\n    optimizer=keras.optimizers.Adam(learning_rate=0.001),  \n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:34:49.818526Z","iopub.execute_input":"2024-12-18T15:34:49.818860Z","iopub.status.idle":"2024-12-18T15:34:49.853114Z","shell.execute_reply.started":"2024-12-18T15:34:49.818824Z","shell.execute_reply":"2024-12-18T15:34:49.852345Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/input_layer.py:25: UserWarning: Argument `input_shape` is deprecated. Use `shape` instead.\n  warnings.warn(\n","output_type":"stream"}],"execution_count":99},{"cell_type":"markdown","source":"## 📈**Modelin Eğitimi ve Parametre Ayarları**\n\nBu adımda, modelimizi eğitmek için gerekli parametreler ayarlandı ve eğitim süreci başlatıldı.\n* **steps_per_epoch:** Eğitim verisetindeki toplam örnek sayısı (X_train) ile batch size (32) bölünerek bir epoch'ta kaç adım yapılacağı hesaplanır. Bu, modelin her epoch sırasında kaç kere eğitim verisi ile güncellenmesi gerektiğini belirler.\n\n* **validation_steps:** Test verisetindeki toplam örnek sayısı (X_test) ile batch size (32) bölünerek doğrulama adımlarının sayısı belirlenir.\n\nModelin eğitimi fit() fonksiyonu ile başlatıldı:\n\n* **train_generator:** Eğitim verilerini yükleyen ve işleyecek olan jeneratör.\n* **validation_generator:** Doğrulama verilerini yükleyen jeneratör.\n* **epochs:** Modelin 25 epoch boyunca eğitileceği belirtilmiş.\nEğitim sırasında her epoch'ta modelin doğruluk ve kayıp değerleri izlenir.","metadata":{}},{"cell_type":"code","source":"steps_per_epoch = len(X_train) // 32 \nvalidation_steps = len(X_test) // 32 \n\n\nhistory = model_cnn.fit(\n    train_generator,\n    validation_data=validation_generator,\n    epochs=25,\n    steps_per_epoch=steps_per_epoch,\n    validation_steps=validation_steps\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T15:34:49.854232Z","iopub.execute_input":"2024-12-18T15:34:49.854560Z","iopub.status.idle":"2024-12-18T16:00:13.608245Z","shell.execute_reply.started":"2024-12-18T15:34:49.854533Z","shell.execute_reply":"2024-12-18T16:00:13.607365Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/25\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 500ms/step - accuracy: 0.2825 - loss: 3.9038 - val_accuracy: 0.4183 - val_loss: 1.6964\nEpoch 2/25\n\u001b[1m127/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m11s\u001b[0m 355ms/step - accuracy: 0.4163 - loss: 1.6831","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n  self.gen.throw(typ, value, traceback)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 371ms/step - accuracy: 0.4204 - loss: 1.6759 - val_accuracy: 0.4487 - val_loss: 1.6308\nEpoch 3/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m75s\u001b[0m 453ms/step - accuracy: 0.4634 - loss: 1.5670 - val_accuracy: 0.4511 - val_loss: 1.5609\nEpoch 4/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m55s\u001b[0m 348ms/step - accuracy: 0.4907 - loss: 1.5006 - val_accuracy: 0.4832 - val_loss: 1.4891\nEpoch 5/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m63s\u001b[0m 380ms/step - accuracy: 0.4967 - loss: 1.4724 - val_accuracy: 0.5247 - val_loss: 1.4224\nEpoch 6/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m56s\u001b[0m 357ms/step - accuracy: 0.5082 - loss: 1.4370 - val_accuracy: 0.4992 - val_loss: 1.4742\nEpoch 7/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 425ms/step - accuracy: 0.5060 - loss: 1.4616 - val_accuracy: 0.4848 - val_loss: 1.4493\nEpoch 8/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m54s\u001b[0m 341ms/step - accuracy: 0.5344 - loss: 1.4037 - val_accuracy: 0.5361 - val_loss: 1.4104\nEpoch 9/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 414ms/step - accuracy: 0.5338 - loss: 1.4006 - val_accuracy: 0.5056 - val_loss: 1.4283\nEpoch 10/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 271ms/step - accuracy: 0.5432 - loss: 1.3594 - val_accuracy: 0.5112 - val_loss: 1.4078\nEpoch 11/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 427ms/step - accuracy: 0.5298 - loss: 1.3779 - val_accuracy: 0.5200 - val_loss: 1.4352\nEpoch 12/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m54s\u001b[0m 341ms/step - accuracy: 0.5271 - loss: 1.4128 - val_accuracy: 0.5208 - val_loss: 1.3836\nEpoch 13/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 417ms/step - accuracy: 0.5287 - loss: 1.3504 - val_accuracy: 0.5441 - val_loss: 1.3918\nEpoch 14/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 329ms/step - accuracy: 0.5440 - loss: 1.3452 - val_accuracy: 0.5537 - val_loss: 1.3157\nEpoch 15/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 357ms/step - accuracy: 0.5491 - loss: 1.3191 - val_accuracy: 0.5337 - val_loss: 1.3217\nEpoch 16/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m55s\u001b[0m 348ms/step - accuracy: 0.5405 - loss: 1.3190 - val_accuracy: 0.5721 - val_loss: 1.2845\nEpoch 17/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m69s\u001b[0m 422ms/step - accuracy: 0.5508 - loss: 1.3151 - val_accuracy: 0.5280 - val_loss: 1.3351\nEpoch 18/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 336ms/step - accuracy: 0.5545 - loss: 1.2840 - val_accuracy: 0.5457 - val_loss: 1.3131\nEpoch 19/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 414ms/step - accuracy: 0.5560 - loss: 1.3041 - val_accuracy: 0.5393 - val_loss: 1.3374\nEpoch 20/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 274ms/step - accuracy: 0.5681 - loss: 1.2601 - val_accuracy: 0.5757 - val_loss: 1.2466\nEpoch 21/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 429ms/step - accuracy: 0.5751 - loss: 1.2418 - val_accuracy: 0.5585 - val_loss: 1.2642\nEpoch 22/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m54s\u001b[0m 339ms/step - accuracy: 0.5785 - loss: 1.2536 - val_accuracy: 0.5609 - val_loss: 1.2888\nEpoch 23/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 412ms/step - accuracy: 0.5767 - loss: 1.2505 - val_accuracy: 0.5641 - val_loss: 1.2706\nEpoch 24/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 328ms/step - accuracy: 0.5694 - loss: 1.2678 - val_accuracy: 0.5673 - val_loss: 1.2642\nEpoch 25/25\n\u001b[1m159/159\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 354ms/step - accuracy: 0.5671 - loss: 1.2714 - val_accuracy: 0.6087 - val_loss: 1.2274\n","output_type":"stream"}],"execution_count":100},{"cell_type":"markdown","source":"## **📊Eğitim Sonuçlarının Görselleştirilmesi**\r\n\r\nBu adımda, modelin eğitim ve doğrulama doğruluğu ile kayıp değerlerini görselleştirdik. Eğitim sürecinin nasıl ilerlediğini değerlendirmek için doğruluk ve kayıp eğrilerini çizdik. \r\n\r\n- **Doğruluk Eğrisi**: Eğitim ve doğrulama doğruluğu arasındaki farkı gösteriyor. Modelin doğruluğunun nasıl arttığını gözlemleyebilirsiniz.\r\n- **Kayıp Eğrisi**: Eğitim ve doğrulama kayıplarını gösterir. Eğitim sırasında modelin kaybının nasıl azaldığını ve doğrulama kaybının durumunu inceleyebilirsiniz.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12, 4))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Train Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend()\nplt.title('Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend()\nplt.title('Loss')\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T16:00:13.609621Z","iopub.execute_input":"2024-12-18T16:00:13.612793Z","iopub.status.idle":"2024-12-18T16:00:14.094546Z","shell.execute_reply.started":"2024-12-18T16:00:13.612760Z","shell.execute_reply":"2024-12-18T16:00:14.093646Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":101},{"cell_type":"markdown","source":"## **🖼️Görsellerin Manipüle Edilmesi ve Test Sonuçlarının Değerlendirilmesi**\r\n\r\nBu adımda görseller üzerinde manipülasyon yaparak modelin performansını değerlendirdik:\r\n\r\n- **Kontrast Artırma**: Görsellerin kontrastı artırılarak daha belirgin hale getirildi. 🎨\r\n- **Döndürme**: Görseller saat yönünde 90 derece döndürüldü. 🔄\r\n- **Manipüle Edilmiş Görsellerin Testi**: Görsellerde yapılan bu değişiklikler modelin doğruluğunu nasıl etkilediğini görmek için test setinde model değerlendirildi. 📊\r\n\r\n📌 **Amaç**: Modelin manipüle edilmiş görseller üzerindeki dayanıklılığını ve performansını analiz etmek.","metadata":{}},{"cell_type":"code","source":"def manipulate_images_v2(images):\n    manipulated_images = []\n    for img in images:\n        manipulated = cv2.convertScaleAbs(img, alpha=2.0, beta=0)  # Kontrast artırma\n        manipulated = cv2.rotate(manipulated, cv2.ROTATE_90_CLOCKWISE)  # Döndürme\n        manipulated_images.append(manipulated)\n    return np.array(manipulated_images)\n\n\nX_test_manipulated_v2 = manipulate_images_v2(X_test)\n\n\nmanipulated_loss_v2, manipulated_accuracy_v2 = model.evaluate(X_test_manipulated_v2, y_test)\nprint(f\"Manipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): {manipulated_accuracy_v2 * 100:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T16:00:14.095580Z","iopub.execute_input":"2024-12-18T16:00:14.095855Z","iopub.status.idle":"2024-12-18T16:00:14.997693Z","shell.execute_reply.started":"2024-12-18T16:00:14.095830Z","shell.execute_reply":"2024-12-18T16:00:14.996825Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.0556 - loss: 532.9446\nManipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): 5.01%\n","output_type":"stream"}],"execution_count":102},{"cell_type":"markdown","source":"## **🎨Renk Sabitliği Uygulaması ve Model Performansı**\r\n\r\nBu adımda manipüle edilmiş görsellere renk sabitliği uygulayarak modelin performansını değerlendirdik:\r\n\r\n- **Renk Sabitliği**: Görsellerin renk dengesi ayarlandı, her renk kanalındaki ortalama değerlere göre ölçeklendirme yapıldı. 🌈\r\n- **Amaç**: Manipülasyon sonrası renk bozulmalarını düzelterek modelin doğruluğunu artırmak. 🔧\r\n- **Sonuçların Karşılaştırılması**: Renk sabitliği uygulanmış test seti ile model performansı yeniden ölçüldü. 📈\r\n\r\n📌 **Sonuç**: Bu adım, manipülasyondan etkilenen görseller üzerinde renk sabitliğinin etkisini analiz etmeyi amaçlar.","metadata":{}},{"cell_type":"code","source":"def apply_color_correction(image):\n    avg_b, avg_g, avg_r = cv2.mean(image)[:3]\n    scale_b = 1.0 / (avg_b + 1e-5)\n    scale_g = 1.0 / (avg_g + 1e-5)\n    scale_r = 1.0 / (avg_r + 1e-5)\n    corrected_image = image * np.array([scale_b, scale_g, scale_r])\n    corrected_image = np.clip(corrected_image, 0, 255).astype(np.uint8)\n    return corrected_image\n\n\nX_test_corrected_v2 = np.array([apply_color_correction(img) for img in X_test_manipulated_v2])\n\n\ncorrected_loss_v2, corrected_accuracy_v2 = model.evaluate(X_test_corrected_v2, y_test)\nprint(f\"Renk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): {corrected_accuracy_v2 * 100:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T16:00:14.999705Z","iopub.execute_input":"2024-12-18T16:00:14.999963Z","iopub.status.idle":"2024-12-18T16:00:15.885327Z","shell.execute_reply.started":"2024-12-18T16:00:14.999938Z","shell.execute_reply":"2024-12-18T16:00:15.884494Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.0738 - loss: 584.3907\nRenk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): 7.28%\n","output_type":"stream"}],"execution_count":103},{"cell_type":"markdown","source":"## **📊Model Doğruluk Sonuçlarının Karşılaştırılması**\r\n\r\nBu aşamada, modelin farklı veri kümeleri üzerindeki performansı karşılaştırıldı:\r\n\r\n1. **Orijinal Test Seti**  \r\n   - Model, hiçbir manipülasyon yapılmamış test seti üzerinde değerlendirildi.  \r\n   - **Amaç**: Modelin temel doğruluğunu ölçmek. ✅  \r\n   - **Sonuç**: Orijinal test seti doğruluğu: **5.40%**\r\n\r\n2. **Manipüle Edilmiş Test Seti (Kontrast + Döndürme)**  \r\n   - Görseller üzerinde kontrast artırma ve döndürme işlemleri uygulandı.  \r\n   - **Amaç**: Modelin veri manipülasyonlarına karşı dayanıklılığını ölçmek. 🔄  \r\n   - **Sonuç**: Manipüle edilmiş test seti doğruluğu: **5.01%**\r\n\r\n3. **Renk Sabitliği Uygulanmış Test Seti**  \r\n   - Manipüle edilmiş görsellere renk sabitliği uygulandı.  \r\n   - **Amaç**: Manipülasyon sonrası görsellerin renk dengesi düzeltilerek model doğruluğunu artırmak. 🌈  \r\n   - **Sonuç**: Renk sabitliği uygulanmış test seti doğruluğu: **7.28%**\r\n\r\n📌 **Nihai Sonuçlar**:  \r\n- **Orijinal** ve **manipüle edilmiş** test setleri arasında ufak bir doğruluk kaybı gözlemlendi.  \r\n- **Renk sabitliği** uygulandığında, doğruluk belirgin şekilde artırıldı.  \r\nBu sonuçlar, modelin manipülasyonlara duyarlı olduğunu ancak renk düzenlemeleri ile performansının iyileştirilebileceğini gösteriyor.","metadata":{}},{"cell_type":"code","source":"\nloss, test_accuracy = model.evaluate(X_test, y_test)\nprint(f\"Orijinal Test Seti Doğruluğu: {test_accuracy * 100:.2f}%\")\n\n\nmanipulated_loss_v2, manipulated_accuracy_v2 = model.evaluate(X_test_manipulated_v2, y_test)\nprint(f\"Manipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): {manipulated_accuracy_v2 * 100:.2f}%\")\n\n\ncorrected_loss_v2, corrected_accuracy_v2 = model.evaluate(X_test_corrected_v2, y_test)\nprint(f\"Renk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): {corrected_accuracy_v2 * 100:.2f}%\")\n\n\nprint(\"\\nSonuçlar:\")\nprint(f\"Orijinal Test Seti Doğruluğu: {test_accuracy * 100:.2f}%\")\nprint(f\"Manipüle Edilmiş Test Seti Doğruluğu (Kontrast + Döndürme): {manipulated_accuracy_v2 * 100:.2f}%\")\nprint(f\"Renk Sabitliği Uygulanmış Test Seti (Manipüle Edilmiş): {corrected_accuracy_v2 * 100:.2f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-18T16:00:15.886548Z","iopub.execute_input":"2024-12-18T16:00:15.887293Z","iopub.status.idle":"2024-12-18T16:00:18.526729Z","shell.execute_reply.started":"2024-12-18T16:00:15.887248Z","shell.execute_reply":"2024-12-18T16:00:18.525862Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.0581 - loss: 168.5680\nOrijinal Test Seti Doğruluğu: 5.40%\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.0556 - loss: 532.9446\nManipüle Edilmiş Test Doğruluğu (Kontrast + Döndürme): 5.01%\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.0738 - loss: 584.3907\nRenk Sabitliği Uygulanmış Test Doğruluğu (Manipüle Edilmiş): 7.28%\n\nSonuçlar:\nOrijinal Test Seti Doğruluğu: 5.40%\nManipüle Edilmiş Test Seti Doğruluğu (Kontrast + Döndürme): 5.01%\nRenk Sabitliği Uygulanmış Test Seti (Manipüle Edilmiş): 7.28%\n","output_type":"stream"}],"execution_count":104}]}